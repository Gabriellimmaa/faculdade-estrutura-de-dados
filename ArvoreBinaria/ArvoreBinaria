public class ArvoreBinaria {

    No raiz;

    public void insere(No n){
        if (raiz == null){
            raiz = n;
            System.out.println("Inserido na raiz");
        }
        else{
            No aux = raiz;
            while(aux!=null){
                if (n.getKey() > aux.getKey()){
                    No filhoDir = aux.getFilhoDireita();
                    if (filhoDir!=null){
                        aux = aux.getFilhoDireita();
                    }
                    else{
                        aux.setFilhoDireita(n);
                        n.setPai(aux);
                        aux=null;
                        System.out.println("Inserido no filho a direita");
                    }
                }
                else{
                    No filhoEsq = aux.getFilhoEsquerda();
                    if (filhoEsq!=null){
                        aux = aux.getFilhoEsquerda();
                    }
                    else{
                        aux.setFilhoEsquerda(n);
                        n.setPai(aux);
                        aux=null;
                        System.out.println("Inserido no filho a esquerda");
                    }
                }
            }
        }
    }

    public No remove(int val){
        No r = busca(val);

        if(r.getFilhoDireita() == null && r.getFilhoEsquerda() == null && r!=raiz){
            No paiR = r.getPai();
            if(r.getKey() > paiR.getKey())
                paiR.setFilhoDireita(null);
            else
                paiR.setFilhoEsquerda(null);
        }
        else if((r.getFilhoDireita() == null || r.getFilhoEsquerda() == null) && r!=raiz){
            No paiR = r.getPai();
            No filho;
            if(r.getFilhoDireita()==null){
                filho = r.getFilhoEsquerda();
                paiR.setFilhoEsquerda(filho);
            }
            else{
                filho = r.getFilhoDireita();
                paiR.setFilhoDireita(filho);
            }
            filho.setPai(paiR);
        }
        else if((r.getFilhoDireita() != null && r.getFilhoEsquerda() != null)){
            No filER = r.getFilhoEsquerda();
            No filDR = r.getFilhoDireita();
            No paiR = r.getPai();
            No minDir = min(filDR);

            if(paiR != null){
                minDir.setPai(paiR);
                if(paiR.getFilhoDireita().equals(r))
                    paiR.setFilhoDireita(minDir);
                else
                    paiR.setFilhoEsquerda(minDir);
            }
            else{
                minDir.setPai(null);
                raiz = minDir;
            }
            minDir.setFilhoEsquerda(filER);
            filER.setPai(minDir);
            if(!minDir.equals(filDR)){
                if(minDir.getFilhoDireita()!=null){
                    filDR.setFilhoEsquerda(minDir.getFilhoDireita());
                    minDir.getFilhoDireita().setPai(filDR);
                }
                minDir.setFilhoDireita(filDR);
                filDR.setPai(minDir);
            }
            r.setFilhoDireita(null);
            r.setFilhoDireita(null);
        }
        return r;
    }

    public No min(No root){
        No aux = root;
        while(aux!=null){
            if(aux.getFilhoEsquerda()==null)
                return aux;
            else
                aux = aux.getFilhoEsquerda();
        }
        return aux;
    }

    public No busca(int val){
        No aux = raiz;
        if(aux.getKey() == val)
            return aux;
        else{
            while(aux!=null){
                if(val > aux.getKey())
                    aux = aux.getFilhoDireita();
                else if(val < aux.getKey())
                    aux = aux.getFilhoEsquerda();
                else //localizou
                    return aux;
            }
        }
        return aux;
    }

    public void imprimeArvore(No root){
        if (root!=null){
            System.out.println(root.toString());
            preOrdem(root.getFilhoEsquerda());
            preOrdem(root.getFilhoDireita());
        }

    }

    public void preOrdem(No root){
        if (root!=null){
            System.out.println(root.toString());
            preOrdem(root.getFilhoEsquerda());
            preOrdem(root.getFilhoDireita());
        }
    }

    public void posOrdem(No root){
        if (root!=null){
            posOrdem(root.getFilhoEsquerda());
            posOrdem(root.getFilhoDireita());
            System.out.println(root.toString());
        }
    }

    public void emOrdem(No root){
        if (root!=null){
            emOrdem(root.getFilhoEsquerda());
            System.out.println(root.toString());
            emOrdem(root.getFilhoDireita());
        }
    }
}
